Index: code_samples/project_view_pane/src/main/java/org/intellij/sdk/view/pane/ImagesProjectNode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- code_samples/project_view_pane/src/main/java/org/intellij/sdk/view/pane/ImagesProjectNode.java	(revision 1f48aabfc42ea24cd75520b6c2e1fe0315b33db9)
+++ code_samples/project_view_pane/src/main/java/org/intellij/sdk/view/pane/ImagesProjectNode.java	(date 1586231206791)
@@ -72,7 +72,7 @@
 
   @NotNull
   @Override
-  public Collection<? extends AbstractTreeNode> getChildren() {
+  public Collection<? extends AbstractTreeNode<?>> getChildren() {
     final List<VirtualFile> files = new ArrayList<>(0);
     for (VirtualFile file : getValue().getChildren()) {
       if (getImagesFiles(myProject).contains(file)) {
@@ -80,7 +80,7 @@
       }
     }
     if (files.isEmpty()) return Collections.emptyList();
-    final List<AbstractTreeNode> nodes = new ArrayList<>(files.size());
+    final List<AbstractTreeNode<?>> nodes = new ArrayList<>(files.size());
     final boolean alwaysOnTop = ProjectView.getInstance(myProject).isFoldersAlwaysOnTop("");
     Collections.sort(files, (o1, o2) -> {
       if (alwaysOnTop) {
Index: code_samples/tree_structure_provider/src/main/java/org/intellij/sdk/treeStructureProvider/TextOnlyTreeStructureProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- code_samples/tree_structure_provider/src/main/java/org/intellij/sdk/treeStructureProvider/TextOnlyTreeStructureProvider.java	(revision 1f48aabfc42ea24cd75520b6c2e1fe0315b33db9)
+++ code_samples/tree_structure_provider/src/main/java/org/intellij/sdk/treeStructureProvider/TextOnlyTreeStructureProvider.java	(date 1586233848723)
@@ -14,11 +14,11 @@
 public class TextOnlyTreeStructureProvider implements TreeStructureProvider {
   @NotNull
   @Override
-  public Collection<AbstractTreeNode> modify(@NotNull AbstractTreeNode parent,
-                                             @NotNull Collection<AbstractTreeNode> children,
+  public Collection<AbstractTreeNode<?>> modify(@NotNull AbstractTreeNode<?> parent,
+                                             @NotNull Collection<AbstractTreeNode<?>> children,
                                              ViewSettings settings) {
-    ArrayList<AbstractTreeNode> nodes = new ArrayList<>();
-    for (AbstractTreeNode child : children) {
+    ArrayList<AbstractTreeNode<?>> nodes = new ArrayList<>();
+    for (AbstractTreeNode<?> child : children) {
       if (child instanceof PsiFileNode) {
         VirtualFile file = ((PsiFileNode) child).getVirtualFile();
         if (file != null && !file.isDirectory() && !(file.getFileType() instanceof PlainTextFileType)) {
@@ -32,7 +32,7 @@
 
   @Nullable
   @Override
-  public Object getData(@NotNull Collection<AbstractTreeNode> selected, @NotNull String dataId) {
+  public Object getData(@NotNull Collection<AbstractTreeNode<?>> selected, @NotNull String dataId) {
     return null;
   }
 }
